문제를 푸셨으니 말을 덧붙이자면,

그... 물론 제가 하는 말이 정답이라는 건 아니고요.

정보 공유 차원에서 말씀드리면

저는 문제를 풀 때 이런 생각들을 하는 것 같아요.

-

"이 문제를 굳이 이렇게 풀어야 할까?"

"코드를 굳이 이렇게 짜야 돼? 더 쉽게 풀 순 없을까?"

-

물론 더 간결한 알고리즘을, 코드를, 생각해내는 시간이 너무 길면

긴 코드를 쓰는 것만 못하지만 그래도 이런 연습을 많이

하면 그 시간도 줄어들 것이라 생각이 들고요.
-

코드에 정답은 없지만, 

문제를 풀어 나가면서 점점 더 간결한 코드를 작성하게 되는 그런 과정도

알고리즘 문제 풀이를 통해서 얻을 수 있는 기쁨 중 하나라고 생각하거든요.

--

다음의 식에서 결과를 바로 아실 수 있나요?

 13  %  7 = ?
-13  %  7 = ?
 13  % -7 = ?
-13  % -7 = ?
--

음수의 나머지 연산은 컴파일러마다 다릅니다.

그래서 평소에 자신이 쓰는 언어에서 만큼은

부호에 따른 결과를 알고 있어야 하는 것 같고요.

-

이런 측면에서 작성하신 함수도 더 간결해질 것 같아요.

구현은 질문자님께 맡깁니다😌.

-

-

그리고 이건 디버깅 관련 팁인데,

가장 흔한 대표적인 버그가 정수 오버플로우랑, 배열 인덱스 에러입니다.

지금은 문제를 푸실 때 따로 이차원 배열을 만들지 않고 (x, y)를 키로 접근하는

해시 테이블을 이용하셨기 때문에 이런 버그를 발견하기 힘드셨던 것 같아요.

이차원 배열로 이 문제를 푸셨다면 좀 더 쉽게 알아차리지 않으셨을까 생각이 들고요.

-

그래서 제가 추천 드리는 바는 크게 2가지인데

-

하나는

한 문제를 풀어도 여러 가지 방법으로 풀어보는 거예요.

실제로 코딩테스트를 볼 때도 내가 지금 구현하는 방법에서 도저히 버그를

못찾겠다면 다른 방법으로 구현을 해야할 때도 있거든요.

예를 들어 그래프 탐색 문제에서 DFS로 풀어보고 BFS로도 풀어본다든지,

또는 DP문제를 풀어도 Top-down으로도 풀어보고 Bottom-up으로 풀어본다든지요.

한 가지 풀이에, 접근 방식에, 매몰되지 않고 다양한 풀이법을 떠올리는 것이 중요하다고 생각하고요.

-

두 번째는 assert문을 걸어보는 거죠.

인덱스 에러를 많이 경험하면 이런 구현 문제를 짤 때는 저절로 assert문을 걸게 되더군요.

실제로 올려주신 코드에서 43줄에 assert문을 추가하면 런타임 에러가 납니다.

https://www.acmicpc.net/source...

런타임 에러가 나면 그 부분을 수정하면 되고,

assert문을 걸었는데도 틀렸습니다 가 뜨면 '아 이게 문제는 아니구나' 하고

의심의 범위를 좁힐 수 있는 거죠.

-

쓰다 보니 글이 너무 길어졌네요ㅎ;

물론 본인이 가장 잘 짤 수 있는 코드를 작성하는 것이 중요하지만,

시야를 조금씩 넓혀가는 것도 도움이 되는 길이 될 겁니다.🙂